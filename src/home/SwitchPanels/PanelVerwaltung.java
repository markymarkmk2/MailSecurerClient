/*
 * PanelTasks.java
 *
 * Created on 13. M�rz 2008, 09:39
 */
package dimm.home.SwitchPanels;

import dimm.general.SQL.SQLResult;
import dimm.home.*;
import dimm.home.Panels.AccountConnectorOverview;
import dimm.home.Panels.DAOverview;
import dimm.home.Panels.HotfolderOverview;
import dimm.home.Panels.ImapFetcherOverview;
import dimm.home.Panels.MilterOverview;
import dimm.home.Panels.ProxyOverview;
import dimm.home.Panels.RoleOverview;
import dimm.home.Rendering.BackgroundTitle;
import dimm.home.Rendering.GhostButton;
import dimm.home.Rendering.SwitchSpringPanel;
import dimm.home.Rendering.TimingTargetAdapter;
import dimm.home.ServerConnect.ServerCall;
import home.shared.hibernate.AccountConnector;
import java.awt.Dimension;
import java.awt.Point;
import org.jdesktop.fuse.ResourceInjector;



/**
 *
 * @author  Administrator
 */
public class PanelVerwaltung extends SwitchSpringPanel
{

    /** Creates new form PanelTasks */
    public PanelVerwaltung( UserMain m )
    {
        super(m, UserMain.PBC_ADMIN);
        ResourceInjector.get().inject(this);

        initComponents();


        PN_BUTTONS.add(new BackgroundTitle( UserMain.getString("Einstellungen" ) ), new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 65, getWidth(), 60));
        PN_BUTTONS.add(new BackgroundTitle( UserMain.getString("Connectoren" ) ), new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 285, getWidth(), 60));
        
    }

    @Override
    public void setSize( Dimension d )
    {
        this.removeAll();
        
        super.setSize(d);
        

        initComponents();


        PN_BUTTONS.add(new BackgroundTitle( UserMain.getString("Einstellungen" ) ), new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 65, getWidth(), 60));
        PN_BUTTONS.add(new BackgroundTitle( UserMain.getString("Connectoren" ) ), new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 285, getWidth(), 60));
    }


 
    boolean check_selected()
    {
        return true;
    }

    
    public void set_selected_station( int i, int _channels)
    {
         
    }

    
            
    Point get_dlg_pos()
    {
        if (UserMain.self.is_touchscreen())
            return new Point( this.getLocationOnScreen().x + 10, this.getLocationOnScreen().y + 10 );
        else
            return new Point( this.getLocationOnScreen().x + 20, this.getLocationOnScreen().y + 20 );
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PN_BUTTONS = new javax.swing.JPanel();
        BT_DISKARCHIVES = new GhostButton();
        BT_ROLE = new GhostButton();
        BT_ACCOUNTCONN = new GhostButton();
        BT_IMAPFETCHER = new GhostButton();
        BT_MILTER = new GhostButton();
        BT_PROXY = new GhostButton();
        BT_HOTFOLDER = new GhostButton();
        PN_HEADER = new javax.swing.JPanel();

        setOpaque(false);

        PN_BUTTONS.setOpaque(false);
        PN_BUTTONS.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BT_DISKARCHIVES.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BT_DISKARCHIVES.setForeground(new java.awt.Color(201, 201, 201));
        BT_DISKARCHIVES.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dimm/home/images/tr_einstellungen.png"))); // NOI18N
        BT_DISKARCHIVES.setText(UserMain.Txt("Archive")); // NOI18N
        BT_DISKARCHIVES.setToolTipText(UserMain.Txt("Storage_für_archivierte_Mails")); // NOI18N
        BT_DISKARCHIVES.setBorderPainted(false);
        BT_DISKARCHIVES.setContentAreaFilled(false);
        BT_DISKARCHIVES.setFocusPainted(false);
        BT_DISKARCHIVES.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BT_DISKARCHIVES.setMaximumSize(new java.awt.Dimension(101, 26));
        BT_DISKARCHIVES.setMinimumSize(new java.awt.Dimension(101, 26));
        BT_DISKARCHIVES.setPreferredSize(new java.awt.Dimension(101, 26));
        BT_DISKARCHIVES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_DISKARCHIVESActionPerformed(evt);
            }
        });
        PN_BUTTONS.add(BT_DISKARCHIVES, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, 160, 50));

        BT_ROLE.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BT_ROLE.setForeground(new java.awt.Color(201, 201, 201));
        BT_ROLE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dimm/home/images/disk-jockey-32x32.png"))); // NOI18N
        BT_ROLE.setText(UserMain.Txt("Roles")); // NOI18N
        BT_ROLE.setToolTipText(UserMain.Txt("Roles_help")); // NOI18N
        BT_ROLE.setBorderPainted(false);
        BT_ROLE.setContentAreaFilled(false);
        BT_ROLE.setFocusPainted(false);
        BT_ROLE.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BT_ROLE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_ROLEActionPerformed(evt);
            }
        });
        PN_BUTTONS.add(BT_ROLE, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, 190, 50));

        BT_ACCOUNTCONN.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BT_ACCOUNTCONN.setForeground(new java.awt.Color(201, 201, 201));
        BT_ACCOUNTCONN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dimm/home/images/login-register.png"))); // NOI18N
        BT_ACCOUNTCONN.setText(UserMain.Txt("Realms")); // NOI18N
        BT_ACCOUNTCONN.setToolTipText(UserMain.Txt("Realms_long")); // NOI18N
        BT_ACCOUNTCONN.setBorderPainted(false);
        BT_ACCOUNTCONN.setContentAreaFilled(false);
        BT_ACCOUNTCONN.setFocusPainted(false);
        BT_ACCOUNTCONN.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BT_ACCOUNTCONN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_ACCOUNTCONNActionPerformed(evt);
            }
        });
        PN_BUTTONS.add(BT_ACCOUNTCONN, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, 190, 50));

        BT_IMAPFETCHER.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BT_IMAPFETCHER.setForeground(new java.awt.Color(201, 201, 201));
        BT_IMAPFETCHER.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dimm/home/images/tr_einstellungen.png"))); // NOI18N
        BT_IMAPFETCHER.setText(UserMain.Txt("IMAP-Connect")); // NOI18N
        BT_IMAPFETCHER.setToolTipText(UserMain.Txt("IMAP_/_Exchange_Server")); // NOI18N
        BT_IMAPFETCHER.setBorderPainted(false);
        BT_IMAPFETCHER.setContentAreaFilled(false);
        BT_IMAPFETCHER.setFocusPainted(false);
        BT_IMAPFETCHER.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BT_IMAPFETCHER.setMaximumSize(new java.awt.Dimension(101, 26));
        BT_IMAPFETCHER.setMinimumSize(new java.awt.Dimension(101, 26));
        BT_IMAPFETCHER.setPreferredSize(new java.awt.Dimension(101, 26));
        BT_IMAPFETCHER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_IMAPFETCHERActionPerformed(evt);
            }
        });
        PN_BUTTONS.add(BT_IMAPFETCHER, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 350, 170, 50));

        BT_MILTER.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BT_MILTER.setForeground(new java.awt.Color(201, 201, 201));
        BT_MILTER.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dimm/home/images/tr_schedule.png"))); // NOI18N
        BT_MILTER.setText(UserMain.Txt("Milter")); // NOI18N
        BT_MILTER.setToolTipText(UserMain.Txt("Postfix_/_Sendmail_Server")); // NOI18N
        BT_MILTER.setBorderPainted(false);
        BT_MILTER.setContentAreaFilled(false);
        BT_MILTER.setFocusPainted(false);
        BT_MILTER.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BT_MILTER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_MILTERActionPerformed(evt);
            }
        });
        PN_BUTTONS.add(BT_MILTER, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 350, 170, 50));

        BT_PROXY.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BT_PROXY.setForeground(new java.awt.Color(201, 201, 201));
        BT_PROXY.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dimm/home/images/disk-jockey-32x32.png"))); // NOI18N
        BT_PROXY.setText(UserMain.Txt("Mail_Proxy")); // NOI18N
        BT_PROXY.setToolTipText(UserMain.Txt("Proxy_for_ SMTP_/_POP3")); // NOI18N
        BT_PROXY.setBorderPainted(false);
        BT_PROXY.setContentAreaFilled(false);
        BT_PROXY.setFocusPainted(false);
        BT_PROXY.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BT_PROXY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_PROXYActionPerformed(evt);
            }
        });
        PN_BUTTONS.add(BT_PROXY, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 350, 190, 50));

        BT_HOTFOLDER.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BT_HOTFOLDER.setForeground(new java.awt.Color(201, 201, 201));
        BT_HOTFOLDER.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dimm/home/images/turntable_33x48.png"))); // NOI18N
        BT_HOTFOLDER.setText(UserMain.Txt("Hotfolder")); // NOI18N
        BT_HOTFOLDER.setToolTipText(UserMain.Txt("File_to_Mail_Archive")); // NOI18N
        BT_HOTFOLDER.setBorderPainted(false);
        BT_HOTFOLDER.setContentAreaFilled(false);
        BT_HOTFOLDER.setFocusPainted(false);
        BT_HOTFOLDER.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BT_HOTFOLDER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_HOTFOLDERActionPerformed(evt);
            }
        });
        PN_BUTTONS.add(BT_HOTFOLDER, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 350, 190, 50));

        PN_HEADER.setOpaque(false);
        PN_HEADER.setLayout(new javax.swing.BoxLayout(PN_HEADER, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(PN_HEADER, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(PN_BUTTONS, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(PN_BUTTONS, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PN_HEADER, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
   

    
    private void BT_ROLEActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BT_ROLEActionPerformed
    {//GEN-HEADEREND:event_BT_ROLEActionPerformed
        // TODO add your handling code here:
        if (check_selected())
        {
            SQLResult<AccountConnector> da_res = UserMain.sqc().get_account_result();
            if (da_res.getRows() == 0)
            {
                UserMain.errm_ok(null, UserMain.Txt("Please_create_a_realm_first"));
                return;
            }

            TimingTargetAdapter tt = make_spring_button_dlg( new RoleOverview(main, true),  get_dlg_pos(),  UserMain.getString("Roles") );
            spring_button_action(evt.getSource(), tt);
            
        }

}//GEN-LAST:event_BT_ROLEActionPerformed

    private void BT_MILTERActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BT_MILTERActionPerformed
    {//GEN-HEADEREND:event_BT_MILTERActionPerformed
        // TODO add your handling code here:
        if (check_selected())
        {
            TimingTargetAdapter tt = make_spring_button_dlg( new MilterOverview(main, true),  get_dlg_pos(),  UserMain.getString("SMTP-Connect") );
            spring_button_action(evt.getSource(), tt);
        }
}//GEN-LAST:event_BT_MILTERActionPerformed

    private void BT_PROXYActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BT_PROXYActionPerformed
    {//GEN-HEADEREND:event_BT_PROXYActionPerformed
        // TODO add your handling code here:
        if (check_selected())
        {
            TimingTargetAdapter tt = make_spring_button_dlg( new ProxyOverview(main, true),  get_dlg_pos(),  UserMain.getString("Mail_Proxy") );
            spring_button_action(evt.getSource(), tt);
        }
        
}//GEN-LAST:event_BT_PROXYActionPerformed

    private void BT_DISKARCHIVESActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BT_DISKARCHIVESActionPerformed
    {//GEN-HEADEREND:event_BT_DISKARCHIVESActionPerformed
        // TODO add your handling code here:
       if (check_selected())
        {
            TimingTargetAdapter tt = make_spring_button_dlg( new DAOverview(main, true),  get_dlg_pos(),  UserMain.getString("Archive") );
            spring_button_action(evt.getSource(), tt);
        }

    }//GEN-LAST:event_BT_DISKARCHIVESActionPerformed

    private void BT_HOTFOLDERActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BT_HOTFOLDERActionPerformed
    {//GEN-HEADEREND:event_BT_HOTFOLDERActionPerformed
        // TODO add your handling code here:
       if (check_selected())
        {
            TimingTargetAdapter tt = make_spring_button_dlg( new HotfolderOverview(main, true),  get_dlg_pos(),  UserMain.getString("Hotfolder") );
            spring_button_action(evt.getSource(), tt);
       }

    }//GEN-LAST:event_BT_HOTFOLDERActionPerformed

    private void BT_ACCOUNTCONNActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BT_ACCOUNTCONNActionPerformed
    {//GEN-HEADEREND:event_BT_ACCOUNTCONNActionPerformed
        // TODO add your handling code here:
       if (check_selected())
        {
            TimingTargetAdapter tt = make_spring_button_dlg( new AccountConnectorOverview(main, true),  get_dlg_pos(),  UserMain.getString("Authentication") );
            spring_button_action(evt.getSource(), tt);
       }

    }//GEN-LAST:event_BT_ACCOUNTCONNActionPerformed

    private void BT_IMAPFETCHERActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BT_IMAPFETCHERActionPerformed
    {//GEN-HEADEREND:event_BT_IMAPFETCHERActionPerformed
        // TODO add your handling code here:
        
        if (check_selected())
        {
            TimingTargetAdapter tt = make_spring_button_dlg( new ImapFetcherOverview(main, true),  get_dlg_pos(),  UserMain.getString("IMAP-Connect") );
            spring_button_action(evt.getSource(), tt);
        }
    }//GEN-LAST:event_BT_IMAPFETCHERActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BT_ACCOUNTCONN;
    private javax.swing.JButton BT_DISKARCHIVES;
    private javax.swing.JButton BT_HOTFOLDER;
    private javax.swing.JButton BT_IMAPFETCHER;
    private javax.swing.JButton BT_MILTER;
    private javax.swing.JButton BT_PROXY;
    private javax.swing.JButton BT_ROLE;
    private javax.swing.JPanel PN_BUTTONS;
    private javax.swing.JPanel PN_HEADER;
    // End of variables declaration//GEN-END:variables

    @Override
    public void activate_panel()
    {
        boolean system_level = true;
    }

    @Override
    public void deactivate_panel()
    {
        
    }

    /*
     * 
     Copying 175 files to J:\Develop\Java\JMailArchiv\Client\build\classes
Copied 32 empty directories to 14 empty directories under J:\Develop\Java\JMailArchiv\Client\build\classes
compile:
Created dir: J:\Develop\Java\JMailArchiv\Client\dist
Building jar: J:\Develop\Java\JMailArchiv\Client\dist\JMailClient.jar
jnlp:
jar:
BUILD SUCCESSFUL (total time: 2 seconds)
*
     * */
}
