/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MailViewPanel.java
 *
 * Created on 15.07.2009, 16:14:22
 */

package dimm.home.Panels.MailView;

import com.thoughtworks.xstream.XStream;
import dimm.home.Rendering.GenericGlossyDlg;
import dimm.home.Rendering.GlossDialogPanel;
import dimm.home.ServerConnect.FunctionCallConnect;
import dimm.home.ServerConnect.InStreamID;
import dimm.home.ServerConnect.ServerInputStream;
import dimm.home.UserMain;
import dimm.home.Utilities.ParseToken;
import home.shared.CS_Constants;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.internet.MimeMessage;
import javax.swing.JButton;
import javax.swing.table.DefaultTableModel;

class MailPreviewDlg extends GenericGlossyDlg
{

    UserMain main;
    MailPreviewDlg( UserMain parent, String body, boolean is_html)
    {
        super( parent, true, new MailPreviewPanel(body, is_html));
        main = parent;
        if (parent.isVisible())
            this.setLocation(parent.getLocationOnScreen().x + 30, parent.getLocationOnScreen().y + 30);
        else
            this.setLocationRelativeTo(null);

        this.setSize( 700, 600);
    }

}



class MailTableModel extends DefaultTableModel
{
    MailViewPanel pnl;
    ArrayList<ArrayList<String>> result_array;
    ArrayList<String> field_list;



    MailTableModel(MailViewPanel _pnl, ArrayList<String> field_list, ArrayList<ArrayList<String>> ret_arr)
    {
        super();

        pnl = _pnl;
        result_array = ret_arr;
        this.field_list = field_list;

    }

    @Override
    public boolean isCellEditable( int row, int column )
    {
        return false;
    }



    @Override
    public String getColumnName(int column)
    {
        return field_list.get(column);
    }

    @Override
    public Class<?> getColumnClass(int columnIndex)
    {
        return new String().getClass();
    }

    @Override
    public int getRowCount()
    {
        if (result_array == null)
            return 0;
        return result_array.size();
    }

    @Override
    public int getColumnCount()
    {
        if (field_list == null)
            return 0;
        return field_list.size();
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex)
    {
        return result_array.get(rowIndex).get(columnIndex);
    }
}
/**
 *
 * @author mw
 */
public class MailViewPanel extends GlossDialogPanel implements MouseListener
{
    String search_id;

    /** Creates new form MailViewPanel */
    public MailViewPanel()
    {
        initComponents();

        TB_RESULT.addMouseListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TB_RESULT = new javax.swing.JTable();
        BT_CLOSE = new javax.swing.JButton();
        BT_EXPORT = new javax.swing.JButton();
        TXT_MAIL = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setText(UserMain.getString("Suche")); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dimm/home/images/tr_browse.png"))); // NOI18N
        jButton1.setIconTextGap(0);
        jButton1.setInheritsPopupMenu(true);
        jButton1.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        TB_RESULT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TB_RESULT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
        );

        BT_CLOSE.setText(UserMain.getString("Schliessen")); // NOI18N
        BT_CLOSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_CLOSEActionPerformed(evt);
            }
        });

        BT_EXPORT.setText(UserMain.getString("Export_Mail")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText(UserMain.getString("Filter")); // NOI18N

        jLabel3.setText("Mailadresse");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(BT_EXPORT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 451, Short.MAX_VALUE)
                                .addComponent(BT_CLOSE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(TXT_MAIL, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TXT_MAIL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(24, 24, 24)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BT_CLOSE)
                    .addComponent(BT_EXPORT))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        // TODO add your handling code here:
        search_id = null;
        FunctionCallConnect fcc = UserMain.fcc();
        String mail = TXT_MAIL.getText();
        String ret = fcc.call_abstract_function("SearchMail CMD:open MA:1 EM:'" + mail + "' FL:'FLDN_MA' VL:'1' CNT:5 ", 5000);
        if (ret.charAt(0) != '0')
        {
            UserMain.errm_ok(my_dlg, "SearchMail open gave " + ret );
            return;
        }
        String[] l = ret.split(" ");

        search_id = l[1];
        ArrayList<String>field_list = new ArrayList<String>();


        field_list.add(CS_Constants.FLD_DATE);
        field_list.add(CS_Constants.FLD_SUBJECT);
        field_list.add(CS_Constants.FLD_SIZE);
       

        String cmd =  "SearchMail CMD:get MA:1 ID:" + search_id + " ROW:-1 FLL:'";
        for ( int i = 0; i < field_list.size(); i++ )
        {
            if (i > 0)
                cmd += ",";
            cmd += field_list.get(i);
        }
        cmd += "'";
       

        ret = fcc.call_abstract_function( cmd, 5000);
        if (ret.charAt(0) != '0')
        {
            UserMain.errm_ok(my_dlg, "SearchMail get gave " + ret );
            return;
        }

        XStream xstream = new XStream();
        Object o = xstream.fromXML(ret.substring(3));

        if (o instanceof ArrayList)
        {
            ArrayList<ArrayList<String>> ret_arr = (ArrayList<ArrayList<String>>)o;

            MailTableModel model = new MailTableModel( this, field_list, ret_arr );
            TB_RESULT.setModel(model);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void BT_CLOSEActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BT_CLOSEActionPerformed
    {//GEN-HEADEREND:event_BT_CLOSEActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_BT_CLOSEActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BT_CLOSE;
    private javax.swing.JButton BT_EXPORT;
    private javax.swing.JTable TB_RESULT;
    private javax.swing.JTextField TXT_MAIL;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables


    Part html_part = null;
    Part text_part = null;
    protected void check_part_content( Part p ) throws IOException, MessagingException
    {
        // SELECT THE PLAIN PART OF AN ALTERNATIVE MP
        if (p.isMimeType("multipart/alternative"))
        {
            Multipart mp = (Multipart) p.getContent();
            for (int i = 0; i < mp.getCount(); i++)
            {
                Part bp = mp.getBodyPart(i);
                if (bp.isMimeType("text/plain"))
                {
                    text_part = bp;
                }
                if (bp.isMimeType("text/html"))
                {
                    html_part = bp;
                }
            }
        }
        else if (p.isMimeType("text/plain"))
        {
            text_part = p;
        }
        else if (p.isMimeType("text/html"))
        {
            html_part = p;
        }
    }

    protected void check_mp_content( Multipart mp ) throws MessagingException, IOException
    {

        for (int i = 0; i < mp.getCount(); i++)
        {
            Part p = mp.getBodyPart(i);
            if (p instanceof Multipart)
            {
                check_mp_content((Multipart) p);
            }
            else
            {
                check_part_content( p);
            }

        }
    }

    @Override
    public void mouseClicked( MouseEvent e )
    {
        if (e.getClickCount() == 2)
        {
            if (e.getSource() == TB_RESULT)
            {
                int row = TB_RESULT.rowAtPoint(e.getPoint());
                ServerInputStream sis = null;
                
                ByteArrayOutputStream baos = new ByteArrayOutputStream();

                try
                {
                    FunctionCallConnect fcc = UserMain.fcc();
                    String ret = fcc.call_abstract_function("SearchMail CMD:open_mail ID:" + search_id + " ROW:" + row, 5);
                    if (ret.charAt(0) != '0')
                    {
                        UserMain.errm_ok(my_dlg, "SearchMail open_mail gave " + ret);
                        return;
                    }
                    String[] l = ret.split(" ");
                    String instream_id = l[1];
                    ParseToken pt = new ParseToken(l[2]);
                    long len = pt.GetLong("LEN:");

                    InStreamID id = new InStreamID(instream_id, len);
                    
                    sis = new ServerInputStream(fcc.get_sqc(), id);
                    sis.read(baos);

                    String msg = new String( baos.toString("UTF-8") );
                    Message mmsg;
                    Session session;
                    java.util.Properties props = new java.util.Properties();
                    props.put("mail.smtp.host", "localhost");
                    session = Session.getDefaultInstance(props, null);



                    ByteArrayInputStream bais = new ByteArrayInputStream( baos.toByteArray(), 0, baos.toByteArray().length );
                    mmsg = new MimeMessage(session, bais);

                    bais.close();

                    Object content = mmsg.getContent();
                    if (content instanceof Multipart)
                    {
                        check_mp_content( (Multipart) content);
                    }
                    else if (content instanceof Part)
                    {
                        Part p = (Part) content;
                        check_part_content(p);
                    }
                    Part p = html_part;
                    if (p == null)
                        p = text_part;


                    String txt_msg = null;
                    if (p != null)
                    {
                        txt_msg = p.getContent().toString();
                    }
                    if (txt_msg == null)
                        txt_msg = mmsg.getContent().toString();

                    MailPreviewDlg dlg = new MailPreviewDlg(UserMain.self, txt_msg, (html_part != null));
                    dlg.setVisible(true);

                }
                catch (Exception iOException)
                {
                    UserMain.errm_ok(my_dlg, "Fehler beim abholen der Mail: " + iOException.getMessage() );
                }
                finally
                {
                    if (sis != null)
                    {
                        try
                        {
                            sis.close();
                        }
                        catch (IOException iOException)
                        {
                        }
                    }
                    if (baos != null)
                    {
                        try
                        {
                            baos.close();
                        }
                        catch ( IOException iOException )
                        {
                        }
                    }

                }
            }
        }
    }

    @Override
    public void mousePressed( MouseEvent e )
    {
    }

    @Override
    public void mouseReleased( MouseEvent e )
    {
    }

    @Override
    public void mouseEntered( MouseEvent e )
    {
    }

    @Override
    public void mouseExited( MouseEvent e )
    {
    }

    @Override
    public JButton get_default_button()
    {
        return BT_CLOSE;
    }

}
